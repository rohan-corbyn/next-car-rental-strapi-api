import {
  adminApi
} from "./chunk-3FQFEJRP.js";

// ../../node_modules/.pnpm/@strapi+admin@5.12.5_@babel+runtime@7.27.0_@codemirror+autocomplete@6.18.6_@codemirror+_e532542aa63550a0ee8951b2b6fcc1ea/node_modules/@strapi/admin/dist/admin/admin/src/services/apiTokens.mjs
var apiTokensService = adminApi.enhanceEndpoints({
  addTagTypes: [
    "ApiToken"
  ]
}).injectEndpoints({
  endpoints: (builder) => ({
    getAPITokens: builder.query({
      query: () => "/admin/api-tokens",
      transformResponse: (response) => response.data,
      providesTags: (res, _err) => [
        ...(res == null ? void 0 : res.map(({ id }) => ({
          type: "ApiToken",
          id
        }))) ?? [],
        {
          type: "ApiToken",
          id: "LIST"
        }
      ]
    }),
    getAPIToken: builder.query({
      query: (id) => `/admin/api-tokens/${id}`,
      transformResponse: (response) => response.data,
      providesTags: (res, _err, id) => [
        {
          type: "ApiToken",
          id
        }
      ]
    }),
    createAPIToken: builder.mutation({
      query: (body) => ({
        url: "/admin/api-tokens",
        method: "POST",
        data: body
      }),
      transformResponse: (response) => response.data,
      invalidatesTags: [
        {
          type: "ApiToken",
          id: "LIST"
        }
      ]
    }),
    deleteAPIToken: builder.mutation({
      query: (id) => ({
        url: `/admin/api-tokens/${id}`,
        method: "DELETE"
      }),
      transformResponse: (response) => response.data,
      invalidatesTags: (_res, _err, id) => [
        {
          type: "ApiToken",
          id
        }
      ]
    }),
    updateAPIToken: builder.mutation({
      query: ({ id, ...body }) => ({
        url: `/admin/api-tokens/${id}`,
        method: "PUT",
        data: body
      }),
      transformResponse: (response) => response.data,
      invalidatesTags: (_res, _err, { id }) => [
        {
          type: "ApiToken",
          id
        }
      ]
    })
  })
});
var { useGetAPITokensQuery, useGetAPITokenQuery, useCreateAPITokenMutation, useDeleteAPITokenMutation, useUpdateAPITokenMutation } = apiTokensService;

export {
  useGetAPITokensQuery,
  useGetAPITokenQuery,
  useCreateAPITokenMutation,
  useDeleteAPITokenMutation,
  useUpdateAPITokenMutation
};
//# sourceMappingURL=chunk-CTJQGWZU.js.map
