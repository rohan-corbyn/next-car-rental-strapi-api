{
  "version": 3,
  "sources": ["../../../../../../node_modules/.pnpm/@strapi+admin@5.12.5_@babel+runtime@7.27.0_@codemirror+autocomplete@6.18.6_@codemirror+_e532542aa63550a0ee8951b2b6fcc1ea/node_modules/@strapi/admin/admin/src/services/homepage.ts", "../../../../../../node_modules/.pnpm/@strapi+admin@5.12.5_@babel+runtime@7.27.0_@codemirror+autocomplete@6.18.6_@codemirror+_e532542aa63550a0ee8951b2b6fcc1ea/node_modules/@strapi/admin/admin/src/pages/Home/components/ContentManagerWidgets.tsx", "../../../../../../node_modules/.pnpm/@strapi+admin@5.12.5_@babel+runtime@7.27.0_@codemirror+autocomplete@6.18.6_@codemirror+_e532542aa63550a0ee8951b2b6fcc1ea/node_modules/@strapi/admin/admin/src/components/GuidedTour/Homepage.tsx", "../../../../../../node_modules/.pnpm/@strapi+admin@5.12.5_@babel+runtime@7.27.0_@codemirror+autocomplete@6.18.6_@codemirror+_e532542aa63550a0ee8951b2b6fcc1ea/node_modules/@strapi/admin/admin/src/pages/Home/components/GuidedTour.tsx", "../../../../../../node_modules/.pnpm/@strapi+admin@5.12.5_@babel+runtime@7.27.0_@codemirror+autocomplete@6.18.6_@codemirror+_e532542aa63550a0ee8951b2b6fcc1ea/node_modules/@strapi/admin/admin/src/pages/Home/HomePage.tsx"],
  "sourcesContent": ["import * as Homepage from '../../../shared/contracts/homepage';\n\nimport { adminApi } from './api';\n\n/**\n * TODO: Remove this service when the future flag for the widget api is removed\n */\nconst homepageService = adminApi\n  .enhanceEndpoints({\n    addTagTypes: ['RecentDocumentList'],\n  })\n  .injectEndpoints({\n    endpoints: (builder) => ({\n      getRecentDocuments: builder.query<\n        Homepage.GetRecentDocuments.Response['data'],\n        Homepage.GetRecentDocuments.Request['query']\n      >({\n        query: (params) => `/admin/homepage/recent-documents?action=${params.action}`,\n        transformResponse: (response: Homepage.GetRecentDocuments.Response) => response.data,\n        providesTags: (res, _err, { action }) => [\n          { type: 'RecentDocumentList' as const, id: action },\n        ],\n      }),\n    }),\n  });\n\nconst { useGetRecentDocumentsQuery } = homepageService;\n\nexport { useGetRecentDocumentsQuery };\n", "import React from 'react';\n\nimport { Box, IconButton, Status, Table, Tbody, Td, Tr, Typography } from '@strapi/design-system';\nimport { Pencil } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { RelativeTime } from '../../../components/RelativeTime';\nimport { Widget } from '../../../components/WidgetHelpers';\nimport { useTracking } from '../../../features/Tracking';\nimport { useGetRecentDocumentsQuery } from '../../../services/homepage';\nimport { capitalise } from '../../../utils/strings';\n\nimport type { RecentDocument } from '../../../../../shared/contracts/homepage';\n\nconst CellTypography = styled(Typography).attrs({ maxWidth: '14.4rem', display: 'block' })`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\ninterface DocumentStatusProps {\n  status: RecentDocument['status'];\n}\n\nconst DocumentStatus = ({ status = 'draft' }: DocumentStatusProps) => {\n  const statusVariant =\n    status === 'draft' ? 'secondary' : status === 'published' ? 'success' : 'alternative';\n\n  const { formatMessage } = useIntl();\n\n  return (\n    <Status variant={statusVariant} size=\"XS\">\n      <Typography tag=\"span\" variant=\"omega\" fontWeight=\"bold\">\n        {formatMessage({\n          id: `content-manager.containers.List.${status}`,\n          defaultMessage: capitalise(status),\n        })}\n      </Typography>\n    </Status>\n  );\n};\n\nconst RecentDocumentsTable = ({ documents }: { documents: RecentDocument[] }) => {\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const navigate = useNavigate();\n\n  const getEditViewLink = (document: RecentDocument): string => {\n    const isSingleType = document.kind === 'singleType';\n    const kindPath = isSingleType ? 'single-types' : 'collection-types';\n    const queryParams = document.locale ? `?plugins[i18n][locale]=${document.locale}` : '';\n\n    return `/content-manager/${kindPath}/${document.contentTypeUid}${isSingleType ? '' : '/' + document.documentId}${queryParams}`;\n  };\n\n  const handleRowClick = (document: RecentDocument) => () => {\n    trackUsage('willEditEntryFromHome');\n    const link = getEditViewLink(document);\n    navigate(link);\n  };\n\n  return (\n    <Table colCount={5} rowCount={documents?.length ?? 0}>\n      <Tbody>\n        {documents?.map((document) => (\n          <Tr onClick={handleRowClick(document)} cursor=\"pointer\" key={document.documentId}>\n            <Td>\n              <CellTypography title={document.title} variant=\"omega\" textColor=\"neutral800\">\n                {document.title}\n              </CellTypography>\n            </Td>\n            <Td>\n              <CellTypography variant=\"omega\" textColor=\"neutral600\">\n                {document.kind === 'singleType'\n                  ? formatMessage({\n                      id: 'content-manager.widget.last-edited.single-type',\n                      defaultMessage: 'Single-Type',\n                    })\n                  : formatMessage({\n                      id: document.contentTypeDisplayName,\n                      defaultMessage: document.contentTypeDisplayName,\n                    })}\n              </CellTypography>\n            </Td>\n            <Td>\n              <Box display=\"inline-block\">\n                {document.status ? (\n                  <DocumentStatus status={document.status} />\n                ) : (\n                  <Typography textColor=\"neutral600\" aria-hidden>\n                    -\n                  </Typography>\n                )}\n              </Box>\n            </Td>\n            <Td>\n              <Typography textColor=\"neutral600\">\n                <RelativeTime timestamp={new Date(document.updatedAt)} />\n              </Typography>\n            </Td>\n            <Td onClick={(e) => e.stopPropagation()}>\n              <Box display=\"inline-block\">\n                <IconButton\n                  tag={Link}\n                  to={getEditViewLink(document)}\n                  onClick={() => trackUsage('willEditEntryFromHome')}\n                  label={formatMessage({\n                    id: 'content-manager.actions.edit.label',\n                    defaultMessage: 'Edit',\n                  })}\n                  variant=\"ghost\"\n                >\n                  <Pencil />\n                </IconButton>\n              </Box>\n            </Td>\n          </Tr>\n        ))}\n      </Tbody>\n    </Table>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * LastEditedWidget\n * -----------------------------------------------------------------------------------------------*/\n\nconst LastEditedWidget = () => {\n  const { formatMessage } = useIntl();\n  const { data, isLoading, error } = useGetRecentDocumentsQuery({ action: 'update' });\n\n  if (isLoading) {\n    return <Widget.Loading />;\n  }\n\n  if (error || !data) {\n    return <Widget.Error />;\n  }\n\n  if (data.length === 0) {\n    return (\n      <Widget.NoData>\n        {formatMessage({\n          id: 'content-manager.widget.last-edited.no-data',\n          defaultMessage: 'No edited entries',\n        })}\n      </Widget.NoData>\n    );\n  }\n\n  return <RecentDocumentsTable documents={data} />;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * LastPublishedWidget\n * -----------------------------------------------------------------------------------------------*/\n\nconst LastPublishedWidget = () => {\n  const { formatMessage } = useIntl();\n  const { data, isLoading, error } = useGetRecentDocumentsQuery({ action: 'publish' });\n\n  if (isLoading) {\n    return <Widget.Loading />;\n  }\n\n  if (error || !data) {\n    return <Widget.Error />;\n  }\n\n  if (data.length === 0) {\n    return (\n      <Widget.NoData>\n        {formatMessage({\n          id: 'content-manager.widget.last-published.no-data',\n          defaultMessage: 'No published entries',\n        })}\n      </Widget.NoData>\n    );\n  }\n\n  return <RecentDocumentsTable documents={data} />;\n};\n\nexport { LastEditedWidget, LastPublishedWidget };\n", "import { Box, Button, Flex, Typography, LinkButton } from '@strapi/design-system';\nimport { ArrowRight } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { NavLink } from 'react-router-dom';\n\nimport { useTracking } from '../../features/Tracking';\n\nimport { LAYOUT_DATA, States, STATES } from './constants';\nimport { Number, VerticalDivider } from './Ornaments';\nimport { GuidedTourContextValue, useGuidedTour } from './Provider';\n\ntype SectionName = keyof GuidedTourContextValue['guidedTourState'];\n\nconst GuidedTourHomepage = () => {\n  const guidedTourState = useGuidedTour('GuidedTourHomepage', (state) => state.guidedTourState);\n  const setSkipped = useGuidedTour('GuidedTourHomepage', (state) => state.setSkipped);\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n\n  const sections = Object.entries(LAYOUT_DATA).map(([key, val]) => ({\n    key: key,\n    title: val.home.title,\n    content: (\n      <LinkButton\n        onClick={() => trackUsage(val.home.trackingEvent)}\n        tag={NavLink}\n        to={val.home.cta.target}\n        endIcon={<ArrowRight />}\n      >\n        {formatMessage(val.home.cta.title)}\n      </LinkButton>\n    ),\n    isDone: Object.values(guidedTourState[key as SectionName]).every((value) => value === true),\n  }));\n\n  const activeSectionIndex = sections.findIndex((section) => !section.isDone);\n\n  const handleSkip = () => {\n    setSkipped(true);\n    trackUsage('didSkipGuidedtour');\n  };\n\n  return (\n    <Box\n      hasRadius\n      shadow=\"tableShadow\"\n      paddingTop={7}\n      paddingRight={4}\n      paddingLeft={7}\n      paddingBottom={4}\n      background=\"neutral0\"\n    >\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n        <Typography variant=\"beta\" tag=\"h2\">\n          {formatMessage({\n            id: 'app.components.GuidedTour.title',\n            defaultMessage: '3 steps to get started',\n          })}\n        </Typography>\n        <Box>\n          {sections.map((section, index) => {\n            const state = getState(activeSectionIndex, index);\n\n            return (\n              <Box key={section.key}>\n                <Flex>\n                  <Box minWidth={`3rem`} marginRight={5}>\n                    <Number state={state}>{index + 1}</Number>\n                  </Box>\n                  <Typography variant=\"delta\" tag=\"h3\">\n                    {formatMessage(section.title)}\n                  </Typography>\n                </Flex>\n                <Flex alignItems=\"flex-start\">\n                  <Flex\n                    justifyContent=\"center\"\n                    minWidth={`3rem`}\n                    marginBottom={3}\n                    marginTop={3}\n                    marginRight={5}\n                  >\n                    {index === sections.length - 1 ? null : <VerticalDivider state={state} />}\n                  </Flex>\n                  <Box marginTop={2}>{state === STATES.IS_ACTIVE ? section.content : null}</Box>\n                </Flex>\n              </Box>\n            );\n          })}\n        </Box>\n      </Flex>\n      <Flex justifyContent=\"flex-end\">\n        <Button variant=\"tertiary\" onClick={handleSkip}>\n          {formatMessage({ id: 'app.components.GuidedTour.skip', defaultMessage: 'Skip the tour' })}\n        </Button>\n      </Flex>\n    </Box>\n  );\n};\n\nconst getState = (activeSectionIndex: number, index: number): States => {\n  if (activeSectionIndex === -1) {\n    return STATES.IS_DONE;\n  }\n  if (index < activeSectionIndex) {\n    return STATES.IS_DONE;\n  }\n  if (index > activeSectionIndex) {\n    return STATES.IS_NOT_DONE;\n  }\n  return STATES.IS_ACTIVE;\n};\n\nexport { GuidedTourHomepage };\n", "import { GuidedTourHomepage } from '../../../components/GuidedTour/Homepage';\nimport { useGuidedTour } from '../../../components/GuidedTour/Provider';\n\nexport const GuidedTour = () => {\n  const guidedTourState = useGuidedTour('HomePage', (state) => state.guidedTourState);\n  const isGuidedTourVisible = useGuidedTour('HomePage', (state) => state.isGuidedTourVisible);\n  const isSkipped = useGuidedTour('HomePage', (state) => state.isSkipped);\n  const showGuidedTour =\n    !Object.values(guidedTourState).every((section) =>\n      Object.values(section).every((step) => step)\n    ) &&\n    isGuidedTourVisible &&\n    !isSkipped;\n\n  if (!showGuidedTour) {\n    return null;\n  }\n\n  return <GuidedTourHomepage />;\n};\n", "import * as React from 'react';\n\nimport { Box, Flex, Grid, Main, Typography } from '@strapi/design-system';\nimport { CheckCircle, Pencil, PuzzlePiece } from '@strapi/icons';\nimport { MessageDescriptor, useIntl } from 'react-intl';\n\nimport { Layouts } from '../../components/Layouts/Layout';\nimport { Page } from '../../components/PageHelpers';\nimport { Widget } from '../../components/WidgetHelpers';\nimport { useEnterprise } from '../../ee';\nimport { useAuth } from '../../features/Auth';\nimport { useStrapiApp } from '../../features/StrapiApp';\n\nimport { LastEditedWidget, LastPublishedWidget } from './components/ContentManagerWidgets';\nimport { GuidedTour } from './components/GuidedTour';\n\n/* -------------------------------------------------------------------------------------------------\n * WidgetRoot\n * -----------------------------------------------------------------------------------------------*/\n\ninterface RootProps {\n  title: MessageDescriptor;\n  icon?: typeof import('@strapi/icons').PuzzlePiece;\n  children: React.ReactNode;\n}\n\nexport const WidgetRoot = ({ title, icon = PuzzlePiece, children }: RootProps) => {\n  const { formatMessage } = useIntl();\n  const id = React.useId();\n  const Icon = icon;\n\n  return (\n    <Flex\n      width=\"100%\"\n      hasRadius\n      direction=\"column\"\n      alignItems=\"flex-start\"\n      background=\"neutral0\"\n      borderColor=\"neutral150\"\n      shadow=\"tableShadow\"\n      tag=\"section\"\n      gap={4}\n      padding={6}\n      aria-labelledby={id}\n    >\n      <Flex direction=\"row\" alignItems=\"center\" gap={2} tag=\"header\">\n        <Icon fill=\"neutral500\" aria-hidden />\n        <Typography textColor=\"neutral500\" variant=\"sigma\" tag=\"h2\" id={id}>\n          {formatMessage(title)}\n        </Typography>\n      </Flex>\n      <Box width=\"100%\" height=\"261px\" overflow=\"auto\" tag=\"main\">\n        {children}\n      </Box>\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * UnstableHomePageCe\n * -----------------------------------------------------------------------------------------------*/\n\nconst WidgetComponent = ({ component }: { component: () => Promise<React.ComponentType> }) => {\n  const [loadedComponent, setLoadedComponent] = React.useState<React.ComponentType | null>(null);\n\n  React.useEffect(() => {\n    const loadComponent = async () => {\n      const resolvedComponent = await component();\n\n      setLoadedComponent(() => resolvedComponent);\n    };\n\n    loadComponent();\n  }, [component]);\n\n  const Component = loadedComponent;\n\n  if (!Component) {\n    return <Widget.Loading />;\n  }\n\n  return <Component />;\n};\n\nconst UnstableHomePageCe = () => {\n  const { formatMessage } = useIntl();\n  const user = useAuth('HomePageCE', (state) => state.user);\n  const displayName = user?.firstname ?? user?.username ?? user?.email;\n  const getAllWidgets = useStrapiApp('UnstableHomepageCe', (state) => state.widgets.getAll);\n\n  return (\n    <Main>\n      <Page.Title>\n        {formatMessage({ id: 'HomePage.head.title', defaultMessage: 'Homepage' })}\n      </Page.Title>\n      <Layouts.Header\n        title={formatMessage(\n          { id: 'HomePage.header.title', defaultMessage: 'Hello {name}' },\n          { name: displayName }\n        )}\n        subtitle={formatMessage({\n          id: 'HomePage.header.subtitle',\n          defaultMessage: 'Welcome to your administration panel',\n        })}\n      />\n      <Layouts.Content>\n        <Flex direction=\"column\" alignItems=\"stretch\" gap={8} paddingBottom={10}>\n          <GuidedTour />\n          <Grid.Root gap={5}>\n            {getAllWidgets().map((widget) => {\n              return (\n                <Grid.Item col={6} s={12} key={widget.uid}>\n                  <WidgetRoot title={widget.title} icon={widget.icon}>\n                    <WidgetComponent component={widget.component} />\n                  </WidgetRoot>\n                </Grid.Item>\n              );\n            })}\n          </Grid.Root>\n        </Flex>\n      </Layouts.Content>\n    </Main>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * HomePageCE\n * -----------------------------------------------------------------------------------------------*/\n\nconst HomePageCE = () => {\n  const { formatMessage } = useIntl();\n  const user = useAuth('HomePageCE', (state) => state.user);\n  const displayName = user?.firstname ?? user?.username ?? user?.email;\n\n  if (window.strapi.future.isEnabled('unstableWidgetsApi')) {\n    return <UnstableHomePageCe />;\n  }\n\n  return (\n    <Main>\n      <Page.Title>\n        {formatMessage({ id: 'HomePage.head.title', defaultMessage: 'Homepage' })}\n      </Page.Title>\n      <Layouts.Header\n        title={formatMessage(\n          { id: 'HomePage.header.title', defaultMessage: 'Hello {name}' },\n          { name: displayName }\n        )}\n        subtitle={formatMessage({\n          id: 'HomePage.header.subtitle',\n          defaultMessage: 'Welcome to your administration panel',\n        })}\n      />\n      <Layouts.Content>\n        <Flex direction=\"column\" alignItems=\"stretch\" gap={8} paddingBottom={10}>\n          <GuidedTour />\n          <Grid.Root gap={5}>\n            <Grid.Item col={6} s={12}>\n              <WidgetRoot\n                title={{\n                  id: 'content-manager.widget.last-edited.title',\n                  defaultMessage: 'Last edited entries',\n                }}\n                icon={Pencil}\n              >\n                <LastEditedWidget />\n              </WidgetRoot>\n            </Grid.Item>\n            <Grid.Item col={6} s={12}>\n              <WidgetRoot\n                title={{\n                  id: 'content-manager.widget.last-published.title',\n                  defaultMessage: 'Last published entries',\n                }}\n                icon={CheckCircle}\n              >\n                <LastPublishedWidget />\n              </WidgetRoot>\n            </Grid.Item>\n          </Grid.Root>\n        </Flex>\n      </Layouts.Content>\n    </Main>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * HomePage\n * -----------------------------------------------------------------------------------------------*/\n\nconst HomePage = () => {\n  const Page = useEnterprise(\n    HomePageCE,\n    // eslint-disable-next-line import/no-cycle\n    async () => (await import('../../../../ee/admin/src/pages/HomePage')).HomePageEE\n  );\n\n  // block rendering until the EE component is fully loaded\n  if (!Page) {\n    return null;\n  }\n\n  return <Page />;\n};\n\nexport { HomePage, HomePageCE };\n"],
  "mappings": "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",
  "names": ["homepageService", "adminApi", "enhanceEndpoints", "addTagTypes", "injectEndpoints", "endpoints", "builder", "getRecentDocuments", "query", "params", "action", "transformResponse", "response", "data", "providesTags", "res", "_err", "type", "id", "useGetRecentDocumentsQuery", "CellTypography", "styled", "Typography", "attrs", "maxWidth", "display", "DocumentStatus", "status", "statusVariant", "formatMessage", "useIntl", "_jsx", "Status", "variant", "size", "tag", "fontWeight", "id", "defaultMessage", "capitalise", "RecentDocumentsTable", "documents", "trackUsage", "useTracking", "navigate", "useNavigate", "getEditViewLink", "document", "isSingleType", "kind", "kindPath", "queryParams", "locale", "contentTypeUid", "documentId", "handleRowClick", "link", "Table", "colCount", "rowCount", "length", "Tbody", "map", "_jsxs", "Tr", "onClick", "cursor", "Td", "title", "textColor", "contentTypeDisplayName", "Box", "aria-hidden", "RelativeTime", "timestamp", "Date", "updatedAt", "e", "stopPropagation", "IconButton", "Link", "to", "label", "Pencil", "LastEditedWidget", "data", "isLoading", "error", "useGetRecentDocumentsQuery", "action", "Widget", "Loading", "Error", "NoData", "LastPublishedWidget", "GuidedTourHomepage", "guidedTourState", "useGuidedTour", "state", "setSkipped", "formatMessage", "useIntl", "trackUsage", "useTracking", "sections", "Object", "entries", "LAYOUT_DATA", "map", "key", "val", "title", "home", "content", "_jsx", "LinkButton", "onClick", "trackingEvent", "tag", "NavLink", "to", "cta", "target", "endIcon", "ArrowRight", "isDone", "values", "every", "value", "activeSectionIndex", "findIndex", "section", "handleSkip", "_jsxs", "Box", "hasRadius", "shadow", "paddingTop", "paddingRight", "paddingLeft", "paddingBottom", "background", "Flex", "direction", "alignItems", "gap", "Typography", "variant", "id", "defaultMessage", "index", "getState", "minWidth", "marginRight", "Number", "justifyContent", "marginBottom", "marginTop", "length", "VerticalDivider", "STATES", "IS_ACTIVE", "Button", "IS_DONE", "IS_NOT_DONE", "GuidedTour", "guidedTourState", "useGuidedTour", "state", "isGuidedTourVisible", "isSkipped", "showGuidedTour", "Object", "values", "every", "section", "step", "_jsx", "GuidedTourHomepage", "WidgetRoot", "title", "icon", "PuzzlePiece", "children", "formatMessage", "useIntl", "id", "useId", "Icon", "_jsxs", "Flex", "width", "hasRadius", "direction", "alignItems", "background", "borderColor", "shadow", "tag", "gap", "padding", "aria-labelledby", "_jsx", "fill", "aria-hidden", "Typography", "textColor", "variant", "Box", "height", "overflow", "WidgetComponent", "component", "loadedComponent", "setLoadedComponent", "useState", "React", "useEffect", "loadComponent", "resolvedComponent", "Component", "Widget", "Loading", "UnstableHomePageCe", "user", "useAuth", "state", "displayName", "firstname", "username", "email", "getAllWidgets", "useStrapiApp", "widgets", "getAll", "Main", "Page", "Title", "defaultMessage", "Layouts", "Header", "name", "subtitle", "Content", "paddingBottom", "GuidedTour", "Grid", "Root", "map", "widget", "Item", "col", "s", "uid", "HomePageCE", "window", "strapi", "future", "isEnabled", "Pencil", "LastEditedWidget", "CheckCircle", "LastPublishedWidget", "HomePage", "useEnterprise", "HomePageEE"]
}
